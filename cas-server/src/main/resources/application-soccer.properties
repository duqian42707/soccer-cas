##
# CAS Authentication Credentials
#
cas.server.name=http://localhost:8080
cas.server.prefix=${cas.server.name}/cas

# 关闭强制https
cas.tgc.secure=false
# 是否开启从json读取服务
cas.serviceRegistry.initFromJson=true

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://database-mysql:3306/soccer?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456

# 通过jpa进行service的管理
# 数据库连接
cas.serviceRegistry.jpa.driverClass=${spring.datasource.driver-class-name}
cas.serviceRegistry.jpa.url=${spring.datasource.url}
cas.serviceRegistry.jpa.user=${spring.datasource.username}
cas.serviceRegistry.jpa.password=${spring.datasource.password}
cas.serviceRegistry.jpa.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# 连接池配置
cas.serviceRegistry.jpa.pool.suspension=false
cas.serviceRegistry.jpa.pool.minSize=6
cas.serviceRegistry.jpa.pool.maxSize=18
cas.serviceRegistry.jpa.pool.maxWait=2000
cas.serviceRegistry.jpa.pool.timeoutMillis=1000
# 默认为create-drop，表示每次启动服务都会清除你之前注册的cas服务
cas.serviceRegistry.jpa.ddlAuto=update


# 带service登出时可直接跳转到对应的地址
cas.logout.followServiceRedirects=true

# 关闭从配置文件中获取用户名密码
cas.authn.accept.users=

# 通过查询数据库进行校验
cas.authn.jdbc.query[0].driverClass=${spring.datasource.driver-class-name}
cas.authn.jdbc.query[0].url=${spring.datasource.url}
cas.authn.jdbc.query[0].user=${spring.datasource.username}
cas.authn.jdbc.query[0].password=${spring.datasource.password}
cas.authn.jdbc.query[0].sql=select * from basic_user where account = ?
cas.authn.jdbc.query[0].fieldPassword=password
# 密码加密方式
cas.authn.jdbc.query[0].passwordEncoder.type=BCRYPT
#cas.authn.jdbc.query[0].passwordEncoder.type=CustomPasswordEncoder


# 返回用户多字段信息 https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#jdbc-1
cas.authn.attributeRepository.jdbc[0].driverClass=${spring.datasource.driver-class-name}
cas.authn.attributeRepository.jdbc[0].url=${spring.datasource.url}
cas.authn.attributeRepository.jdbc[0].user=${spring.datasource.username}
cas.authn.attributeRepository.jdbc[0].password=${spring.datasource.password}

cas.authn.attributeRepository.jdbc[0].attributes.id=id
cas.authn.attributeRepository.jdbc[0].attributes.account=account
cas.authn.attributeRepository.jdbc[0].attributes.user_name=user_name

cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].order=0
cas.authn.attributeRepository.jdbc[0].requireAllAttributes=true
cas.authn.attributeRepository.jdbc[0].caseCanonicalization=UPPER
cas.authn.attributeRepository.jdbc[0].queryType=AND

# Used only when there is a mapping of many rows to one user
#cas.authn.attributeRepository.jdbc[0].columnMappings.columnAttrName1=columnAttrValue1
#cas.authn.attributeRepository.jdbc[0].columnMappings.columnAttrName2=columnAttrValue2
#cas.authn.attributeRepository.jdbc[0].columnMappings.columnAttrName3=columnAttrValue3

cas.authn.attributeRepository.jdbc[0].sql=SELECT * FROM basic_user  WHERE {0}
cas.authn.attributeRepository.jdbc[0].username=account

#GitHub OAuth Login
cas.authn.pac4j.github.id=66006d719e505716928d
cas.authn.pac4j.github.secret=c60bfcdf95ebbac2ff84b32d8721197f3a7dbaec
cas.authn.pac4j.github.principalAttributeId=id
cas.authn.pac4j.github.clientName=github

#WeChat OAuth Login
cas.authn.pac4j.oauth2[0].id=wxac0f1c863937d067
#由于微信的不为clinet_id，为appid
cas.authn.pac4j.oauth2[0].customParams.appid=wxac0f1c863937d067
#微信scope登录为snsapi_login
cas.authn.pac4j.oauth2[0].customParams.scope=snsapi_login
cas.authn.pac4j.oauth2[0].secret=bfeedc350fe15f45315a0ab67643085e
cas.authn.pac4j.oauth2[0].authUrl=https://open.weixin.qq.com/connect/qrconnect
cas.authn.pac4j.oauth2[0].tokenUrl=https://api.weixin.qq.com/sns/oauth2/access_token
cas.authn.pac4j.oauth2[0].profileUrl=https://api.weixin.qq.com/sns/userinfo
cas.authn.pac4j.oauth2[0].clientName=WeChat

# springboot OAuth Login
# http://222.30.194.225:9000/auth/oauth/authorize?client_id=test-code&response_type=code&redirect_uri=https://www.baidu.com
cas.authn.pac4j.oauth2[1].id=test-code
cas.authn.pac4j.oauth2[1].secret=123456
cas.authn.pac4j.oauth2[1].authUrl=http://222.30.194.225:9000/auth/oauth/authorize
cas.authn.pac4j.oauth2[1].tokenUrl=http://222.30.194.225:9000/auth/oauth/token
cas.authn.pac4j.oauth2[1].profileUrl=http://222.30.194.225:9000/auth/user
cas.authn.pac4j.oauth2[1].clientName=springboot
